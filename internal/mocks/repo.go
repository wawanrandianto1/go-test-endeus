// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	endeus "endeus/wawan/pkg/endeus"
	model "endeus/wawan/pkg/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCategoryRepository is a mock of CategoryRepository interface.
type MockCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRepositoryMockRecorder
}

// MockCategoryRepositoryMockRecorder is the mock recorder for MockCategoryRepository.
type MockCategoryRepositoryMockRecorder struct {
	mock *MockCategoryRepository
}

// NewMockCategoryRepository creates a new mock instance.
func NewMockCategoryRepository(ctrl *gomock.Controller) *MockCategoryRepository {
	mock := &MockCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRepository) EXPECT() *MockCategoryRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockCategoryRepository) FindAll() ([]model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockCategoryRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockCategoryRepository)(nil).FindAll))
}

// MockResepRepository is a mock of ResepRepository interface.
type MockResepRepository struct {
	ctrl     *gomock.Controller
	recorder *MockResepRepositoryMockRecorder
}

// MockResepRepositoryMockRecorder is the mock recorder for MockResepRepository.
type MockResepRepositoryMockRecorder struct {
	mock *MockResepRepository
}

// NewMockResepRepository creates a new mock instance.
func NewMockResepRepository(ctrl *gomock.Controller) *MockResepRepository {
	mock := &MockResepRepository{ctrl: ctrl}
	mock.recorder = &MockResepRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResepRepository) EXPECT() *MockResepRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockResepRepository) Create(param endeus.ResepParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", param)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockResepRepositoryMockRecorder) Create(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResepRepository)(nil).Create), param)
}

// Delete mocks base method.
func (m *MockResepRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockResepRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResepRepository)(nil).Delete), id)
}

// FindAll mocks base method.
func (m *MockResepRepository) FindAll(str string) ([]model.Resep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", str)
	ret0, _ := ret[0].([]model.Resep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockResepRepositoryMockRecorder) FindAll(str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockResepRepository)(nil).FindAll), str)
}

// FindAllByCategoryID mocks base method.
func (m *MockResepRepository) FindAllByCategoryID(categoryID uint) ([]model.Resep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByCategoryID", categoryID)
	ret0, _ := ret[0].([]model.Resep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByCategoryID indicates an expected call of FindAllByCategoryID.
func (mr *MockResepRepositoryMockRecorder) FindAllByCategoryID(categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByCategoryID", reflect.TypeOf((*MockResepRepository)(nil).FindAllByCategoryID), categoryID)
}

// FindByID mocks base method.
func (m *MockResepRepository) FindByID(resepID uint) (model.Resep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", resepID)
	ret0, _ := ret[0].(model.Resep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockResepRepositoryMockRecorder) FindByID(resepID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockResepRepository)(nil).FindByID), resepID)
}

// Unpublish mocks base method.
func (m *MockResepRepository) Unpublish(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unpublish", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unpublish indicates an expected call of Unpublish.
func (mr *MockResepRepositoryMockRecorder) Unpublish(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unpublish", reflect.TypeOf((*MockResepRepository)(nil).Unpublish), id)
}

// Update mocks base method.
func (m *MockResepRepository) Update(id uint, param endeus.ResepParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockResepRepositoryMockRecorder) Update(id, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockResepRepository)(nil).Update), id, param)
}
